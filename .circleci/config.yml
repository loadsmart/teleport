version: 2.1

orbs:
  lumper: loadsmart/lumper@4
  sentinel: loadsmart/sentinel@1

commands:
  setup-env:
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            TELEPORT_VERSION=$(make print-version)
            echo 'export TARBALL_PATH="/tmp/teleport-tarballs"' >> "$BASH_ENV"
            echo "export TELEPORT_VERSION=${TELEPORT_VERSION}" >> "$BASH_ENV"

jobs:
  build-distroless-arm64:
    resource_class: arm.large
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    steps:
      - checkout

      - setup-env

      - restore_cache:
          keys:
            - go-build-cache-v1-{{ arch }}-{{ checksum "go.sum" }}

      - run:
          name: Build Teleport Binaries
          command: |
            export GOCACHE="$HOME/.cache/go"
            mkdir -p "$GOCACHE"
            make docker-binaries

      - save_cache:
          key: go-build-cache-v1-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go

      - run:
          name: Prepare Artifacts
          command: |
            mkdir -p ${TARBALL_PATH}
            cp teleport-${TELEPORT_VERSION}-linux-arm64-bin.tar.gz ${TARBALL_PATH}/
            cp build.assets/charts/fetch-debs build/fetch-debs
            cp build.assets/charts/Dockerfile-distroless build/Dockerfile

      - run:
          name: Build debian package
          command: |
            make build-archive
            make deb

      - run:
          name: Build ARM64 Distroless Docker Image
          command: |
            docker buildx build \
              -f build/Dockerfile \
              --platform linux/arm64 \
              --build-arg TELEPORT_VERSION=${TELEPORT_VERSION} \
              --build-arg TELEPORT_RELEASE_INFIX= \
              -t loadsmart/teleport:${TELEPORT_VERSION}-arm64 build

workflows:
  build-and-push:
    jobs:
      - build-distroless-arm64:
          context: org-global

  developer-productivity:
    jobs:
      - sentinel/default:
          context: org-global
